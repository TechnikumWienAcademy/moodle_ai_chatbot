{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Ask a question...'\nvar errorString = 'An error occurred! Please try again later.'\n\nexport const init = (data) => {\n\n    console.log(\"start\")\n\n    //console.log(data)\n\n    const modId = data['modId']\n    //const blockId = data['blockId']\n    //const blockId = modId\n    const api_type = data['api_type']\n    const persistConvo = data['persistConvo']\n    //const canAskQuestions = data['canAskQuestions']\n    const userId = data['userId']\n\n    // Initialize local data storage if necessary\n    // If a thread ID exists for this block, make an API request to get existing messages\n    if (api_type === 'assistant') {\n\n        chatData = localStorage.getItem(\"mod_openaichat_data\")\n        console.log(chatData)\n        //console.log(chatData)\n        if (chatData) {\n            chatData = JSON.parse(chatData)\n            //console.log(chatData[modId]['threadId'])\n\n            if (chatData[modId] && chatData[modId]['threadId'] && persistConvo === \"1\") {\n                console.log('here')\n                fetch(`${M.cfg.wwwroot}/mod/openaichat/api/thread.php?modId=${modId}&thread_id=${chatData[modId]['threadId']}`)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data)\n                    for (let message of data) {\n                        addToChatLog(message.role === 'user' ? 'user' : 'bot', message.message)\n                    }\n                })\n                // Some sort of error in the API call. Probably the thread no longer exists, so lets reset it\n                .catch(error => {\n                    chatData[modId] = {}\n                    localStorage.setItem(\"mod_openaichat_data\", JSON.stringify(chatData));\n                })\n            // The block ID doesn't exist in the chat data object, so let's create it\n            } else {\n                chatData[modId] = {}\n            }\n        // We don't even have a chat data object, so we'll create one\n        } else {\n            chatData = {[modId]: {}}\n        }\n        localStorage.setItem(\"mod_openaichat_data\", JSON.stringify(chatData));\n    }\n\n    if (checkUserLimit(modId, userId) == false){\n        return disableButton()\n    }\n\n    //remaining number of questions.\n    if (checkUserLimit(modId, userId) !== -1) {\n        console.log(checkUserLimit(modId, userId))\n        document.querySelector(\"#remaining-questions\").innerText = \"You have \" + checkUserLimit(modId, userId) + \" question(s) remaining.\";\n    }\n\n    document.querySelector('#openai_input').addEventListener('keyup', e => {\n\n        if (e.which === 13 && e.target.value !== \"\") {\n            if (checkUserLimit(modId, userId) == false){\n                return disableButton()\n            }\n            addToChatLog('user', e.target.value)\n            createCompletion(e.target.value, modId, api_type, userId)\n            e.target.value = ''\n        }\n    })\n    document.querySelector('.mod_openaichat #go').addEventListener('click', e => {\n\n        const input = document.querySelector('#openai_input')\n        if (input.value !== \"\") {\n            if (checkUserLimit(modId, userId) == false){\n                return disableButton()\n            }\n            addToChatLog('user', input.value)\n            createCompletion(input.value, modId, api_type, userId)\n            input.value = ''\n        }\n    })\n\n    document.querySelector('.mod_openaichat #refresh').addEventListener('click', e => {\n        clearHistory(modId)\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'mod_openaichat_data'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'mod_openaichat_data'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n\n    let messageContainer = document.querySelector('#openai_chat_log')\n\n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Clears the thread ID from local storage and removes the messages from the UI in order to refresh the chat\n */\nconst clearHistory = (modId) => {\n    chatData = localStorage.getItem(\"mod_openaichat_data\")\n    if (chatData) {\n        chatData = JSON.parse(chatData)\n        if (chatData[modId]) {\n            chatData[modId] = {}\n            localStorage.setItem(\"mod_openaichat_data\", JSON.stringify(chatData));\n        }\n    }\n    document.querySelector('#openai_chat_log').innerHTML = \"\"\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n * @param {int} modId The ID of the block this message is being sent from -- used to override settings if necessary\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n */\nconst createCompletion = (message, modId, api_type, userId) => {\n\n    let threadId = null\n    let chatData\n\n    if (checkUserLimit(modId, userId) == false){\n        return disableButton()\n    }\n\n    // If the type is assistant, attempt to fetch a thread ID\n    if (api_type === 'assistant') {\n        chatData = localStorage.getItem(\"mod_openaichat_data\")\n        if (chatData) {\n            chatData = JSON.parse(chatData)\n            if (chatData[modId]) {\n                threadId = chatData[modId]['threadId'] || null\n            }\n        } else {\n            // create the chat data item if necessary\n            chatData = {[modId]: {}}\n        }\n    }\n\n    const history = buildTranscript()\n\n    document.querySelector('.mod_openaichat #control_bar').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n\n    fetch(`${M.cfg.wwwroot}/mod/openaichat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            modId: modId,\n            threadId: threadId\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('.mod_openaichat #control_bar').classList.remove('disabled')\n\n        if (!response.ok) {\n            throw Error(response.statusText)\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        try {\n            console.log(data)\n            storeUserLog(modId, message, data.message)\n            addToChatLog('bot', data.message)\n            if (data.thread_id) {\n                chatData[modId]['threadId'] = data.thread_id\n                localStorage.setItem(\"mod_openaichat_data\", JSON.stringify(chatData));\n            }\n        } catch (error) {\n            console.log(error)\n            addToChatLog('bot', data.error.message)\n        }\n        setTimeout(function(){\n            if (checkUserLimit(modId, userId) == false){\n                return disableButton()\n            }else{\n                if (checkUserLimit(modId, userId) !== -1) {\n                    document.querySelector(\"#remaining-questions\").innerText = \"You have \" + checkUserLimit(modId, userId) + \" question(s) remaining.\";\n                }\n                document.querySelector('#openai_input').focus()\n            }\n        }, 50)\n    })\n    .catch(error => {\n        console.log(error)\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n\n    return transcript\n}\n\n//ajax call to store chat log and user log to DB.\nconst storeUserLog = (modId, requestMessage, responseMessage) => {\n    $.ajax({\n        method: \"POST\",\n        url: `${M.cfg.wwwroot}/mod/openaichat/api/record_log.php`,\n        data: {\"modId\" : modId, \"requestMessage\" : requestMessage, \"responseMessage\" : responseMessage},\n        dataType: \"text\"\n    })\n}\n\n//ajax call to see if the user can still ask questions.\nconst checkUserLimit = (modId, userId) => {\n    return $.ajax({\n        method: \"POST\",\n        url: `${M.cfg.wwwroot}/mod/openaichat/api/question_counter.php`,\n        data: {\"modId\" : modId, \"userId\" : userId},\n        dataType: \"JSON\",\n        async: false,\n        success: function(result){\n            a = result\n        }\n    }).responseJSON\n}\n\n//disabling and giving style to button if there is no limit left.\nfunction disableButton(){\n    document.querySelector('.mod_openaichat #control_bar').classList.add('disabled')\n    document.querySelector('#openai_input').classList.add('error')\n    document.querySelector('#openai_input').placeholder = \"Limit reached\"\n    document.querySelector('#remaining-questions').style.display = \"none\"\n    return false\n}"],"names":["questionString","errorString","data","console","log","modId","api_type","persistConvo","userId","chatData","localStorage","getItem","JSON","parse","fetch","M","cfg","wwwroot","then","response","json","message","addToChatLog","role","catch","error","setItem","stringify","checkUserLimit","disableButton","document","querySelector","innerText","addEventListener","e","which","target","value","createCompletion","input","clearHistory","require","str","get_strings","key","component","results","type","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","threadId","history","buildTranscript","remove","placeholder","blur","method","body","removeChild","lastElementChild","ok","Error","statusText","storeUserLog","thread_id","setTimeout","focus","transcript","querySelectorAll","forEach","index","length","user","userName","contains","assistantName","push","requestMessage","responseMessage","$","ajax","url","dataType","async","success","result","a","responseJSON","display"],"mappings":"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"}